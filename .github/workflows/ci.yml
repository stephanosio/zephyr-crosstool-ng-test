name: CI

on:
  push:
    branches: [ test_master ]
  pull_request:
    branches: [ test_master ]

jobs:
  build:
    name: ${{ matrix.target }} (${{ matrix.host.name }})
    runs-on: ${{ matrix.host.build }}

    strategy:
      fail-fast: false
      matrix:
        host:
        - name: linux-x86_64
          build: ubuntu-18.04
        - name: macos-x86_64
          build: macos-10.15
        - name: windows-x86_64
          build: ubuntu-18.04
        target:
        - aarch64-zephyr-elf

    steps:
    # Set up build environment (Linux build system)
    - name: Install dependency packages for Linux
      if: ${{ matrix.host.build == 'ubuntu-18.04' }}
      run: |
        sudo apt-get install bison flex gettext help2man libncurses5-dev
        sudo apt-get install libtool-bin libtool-doc texinfo

        if [ "${{ matrix.host.name }}" == "windows-x86_64" ]; then
          sudo apt-get install binutils-mingw-w64
          sudo apt-get install gcc-mingw-w64
          sudo apt-get install g++-mingw-w64
        fi

    # Set up build environment (macOS build system)
    - name: Install dependency packages for macOS
      if: ${{ runner.os == 'macOS' }}
      run: |
        brew install autoconf automake bash binutils gawk gnu-sed help2man
        brew install ncurses

    - name: Create case sensitive workspace volume for macOS
      if: ${{ runner.os == 'macOS' }}
      run: |
        hdiutil create ${HOME}/Workspace.sparseimage -volname Workspace -type SPARSE -size 14g -fs HFSX
        hdiutil mount ${HOME}/Workspace.sparseimage

    # Check out source code
    - name: Check out source code
      uses: actions/checkout@v2

    # Fetch all history for all tags and branches
    - run: git fetch --prune --unshallow

    # Build crosstool-ng
    - name: Build crosstool-ng
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          export PATH="$PATH:/usr/local/opt/binutils/bin"
          export CPPFLAGS="-I/usr/local/opt/ncurses/include -I/usr/local/opt/gettext/include"
          export LDFLAGS="-L/usr/local/opt/ncurses/lib -L/usr/local/opt/gettext/lib"
        fi

        ./bootstrap
        ./configure --prefix=${HOME}/crosstool-ng
        make
        make install

    - name: Test crosstool-ng
      run: |
        ${HOME}/crosstool-ng/bin/ct-ng version

    # Build toolchain
    - name: Build ${{ matrix.target }} toolchain for ${{ matrix.host.name }}
      run: |
        export CT_NG="${HOME}/crosstool-ng/bin/ct-ng"

        # Resolve workspace path
        if [ "$RUNNER_OS" == "macOS" ]; then
          export WORKSPACE="/Volumes/Workspace"
        else
          export WORKSPACE="${HOME}"
        fi

        # Set output path
        export CT_PREFIX="${WORKSPACE}/output"

        # Create build directory
        mkdir -p ${WORKSPACE}/build
        cd ${WORKSPACE}/build

        # Load default target configurations
        ${CT_NG} ${{ matrix.target }}

        # Set build configurations
        cat <<EOF >> .config
        CT_CLEAN_AFTER_BUILD_STEP=y
        EOF

        # Set logging configurations
        cat <<EOF >> .config
        CT_LOG_PROGRESS_BAR=n
        CT_LOG_EXTRA=n
        CT_LOG_ALL=y
        CT_LOG_LEVEL_MAX="ALL"
        EOF

        # Set Windows Canadian cross compilation configurations
        if [ "${{ matrix.host.name }}" == "windows-x86_64" ]; then
          cat <<EOF >> .config
        CT_CANADIAN=y
        CT_HOST="x86_64-w64-mingw32"
        CT_GDB_CROSS_PYTHON=n
        EOF
        fi

        # Merge configurations
        ${CT_NG} savedefconfig DEFCONFIG=build.config
        ${CT_NG} distclean
        ${CT_NG} defconfig DEFCONFIG=build.config

        # Build
        ${CT_NG} build

        # Resolve output directory path
        if [ "${{ matrix.host.name }}" == "windows-x86_64" ]; then
          export OUTPUT_DIR="${WORKSPACE}/output/HOST-x86_64-w64-mingw32"
        else
          export OUTPUT_DIR="${WORKSPACE}/output"
        fi

        # Move build log file out of workspace
        sudo mv ${OUTPUT_DIR}/${{ matrix.target }}/build.log.bz2 \
                ${HOME}/${{ matrix.target }}.log.bz2

        # Create archive
        tar -zcvf ${HOME}/${{ matrix.target }}.tar.gz -C ${OUTPUT_DIR} .

    # Upload build log
    - name: Upload build log
      uses: actions/upload-artifact@v2
      with:
        name: log_${{ matrix.host.name }}_${{ matrix.target }}
        path: ~/${{ matrix.target }}.log.bz2

    # Upload toolchain
    - name: Upload toolchain
      uses: actions/upload-artifact@v2
      with:
        name: toolchain_${{ matrix.host.name }}_${{ matrix.target }}
        path: ~/${{ matrix.target }}.tar.gz
